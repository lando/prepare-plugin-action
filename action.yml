name: "Prepare Release Action"
description: "An action that can automate release steps and sync them back to the releasing repo."
branding:
  icon: zap
  color: purple

inputs:
  # Required
  version:
    description: "The version of the thing to be released. Must be a semver valid string."
    required: false
    default: ${{ github.event.release.tag_name }}

  # Optional
  commands:
    description: "A list of commands to run to prepare the release."
    required: false
  lando-plugin:
    description: "A special easy-mode setting to prepare and valdiate Lando plugins."
    required: false
    default: false
  root:
    description: "The location of the code being prepared for release."
    required: false
    default: ${{ github.workspace }}
  sync:
    description: "A toggle to enable/disable code syncing."
    required: false
    default: true
  sync-branch:
    description: "The target branch to use when syncing changes back to the repo ."
    required: false
    default: ${{ github.event.release.target_commitish }}
  sync-email:
    description: "The email to use when syncing changes back to the repo."
    required: false
    default: "github-actions@github.com"
  sync-tags:
    description: "A list of other tags to sync back to the repo."
    required: false
  sync-username:
    description: "The username to use when syncing changes back to the repo."
    required: false
    default: "github-actions"

runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "16"
        cache: npm
    - name: Install dependencies
      run: npm install --prefer-offline --frozen-lockfile
      shell: bash

    - name: Validate Needed Inputs
      uses: actions/github-script@v6
      with:
        script: |
          // deps
          const clean = require('semver/functions/clean');
          const fs = require('fs');
          const valid = require('semver/functions/valid');

          // get inputs
          const inputs = ${{ toJSON(inputs) }};

          // validate that we have a version
          if (!inputs.version) core.setFailed('Version is a required input!');

          // and that it is semantically valid
          if (valid(clean(inputs.version)) === null) core.setFailed('Version must be semver valid!');

          // and that we have a package.json
          if (!fs.existsSync(`${inputs.root}/package.json`)) core.setFailed(`Could not detect a package.json in ${inputs.root}`);

          // log
          core.info(`will bump ${inputs.root}/pacakge.json to ${inputs.version});

    - name: Install Dependencies
      shell: bash
      run: |
        npm install -g bundle-dependencies@1.0.2
        npm install -g version-bump-prompt@6.1.0

    # - name: Bundle dependencies
    #   shell: bash
    #   if: ${{ inputs.bundle-deps == "true" }}
    #   run: |
    #     bundle-dependencies update
    #     echo "Bundled dependencies:"
    #     bundle-dependencies list-bundled-dependencies
    # - name: Lando Plugin stuff
    #   if: ${{ inputs.validate-plugin == "true" }}
    #   uses: actions/github-script@v6
    #   env:
    #     PJSON_LOCATION: ${{ github.workspace }}/package.json
    #   with:
    #     script: |
    #       const pjsonLocation = process.env.PJSON_LOCATION;
    #       const pjson = require(pjsonLocation);
    #       const hasLandoKeyword = Array.isArray(pjson.keywords) && (pjson.keywords.includes("lando") || pjson.keywords.includes("lando-plugin"));
    #       if (hasLandoKeyword) {
    #         // Add in GitHub output https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
    #         core.info("Confirmed this is a Lando plugin.")
    #         process.exit(0);
    #       } else {
    #         core.setFailed("Invalid Lando plugin; required keywords not detected in package.json.");
    #       }

    - name: Checkout Code
      shell: bash
      run: |
        git fetch --unshallow && git fetch --all
        git config user.name ${{ inputs.git-username }}
        git config user.email ${{ inputs.git-email }}
        git checkout ${{ inputs.sync-branch }}

    - name: Run Commands
      shell: bash
      run: |
        echo "hello"

    - name: Bump Version and Push
      shell: bash
      run: |
        bump "${{ github.event.release.tag_name }}" --commit
        git diff
        # git push origin ${{ github.event.release.target_commitish }}

    # - name: Retag Release
    #   shell: bash
    #   run: |
    #     TAGS=${{ inputs.tags }}
    #     IFS="," read -ra TAG_ARRAY <<< "$TAGS"

    #     for tag in "${TAG_ARRAY[@]}"; do
    #       git tag -f ${tag} $(git log --pretty=format:"%h" -n 1)
    #       git push --force origin ${tag}
    #     done

    # - name: Output package bump result
    #   shell: bash
    #   run: |
    #     echo "Bumped package version to ${{ github.event.release.tag_name }}"



