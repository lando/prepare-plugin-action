name: "Prepare Release Action"
description: "An action that can automate release steps and sync them back to the releasing repo."
branding:
  icon: zap
  color: purple

inputs:
  # Required
  version:
    description: "The version of the thing to be released. Must be a semver valid string."
    required: false
    default: ${{ github.event.release.tag_name }}

  # Optional
  commands:
    description: "A list of commands to run to prepare the release."
    required: false
  git-username:
    description: "Username used when committing the newly bumped version of the plugin."
    required: false
    default: "github-actions"
  git-email:
    description: "Email used when committing the newly bumped version of the plugin."
    required: false
    default: "github-actions@github.com"
  root:
    description: "The location of the code being prepared for release."
    required: false
    default: ${{ github.workspace }}



  # commands:
  # commit:
  # lando-plugin:
  # other-tags:
  #   description: "The new tag of the plugin to be published. Can be a comma delimited string of multiple tags."
  #   required: false
  #   default: ${{ github.event.release.tag_name }}

runs:
  using: "composite"
  steps:
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "16"
        cache: yarn
    - name: Install Yarn dependencies
      run: yarn install --prefer-offline --frozen-lockfile
      shell: bash

    - name: Validate Inputs
      uses: actions/github-script@v6
      with:
        script: |
          const {root, version} = ${{ toJSON(inputs) }};

          const valid = require('semver/functions/valid');
          const clean = require('semver/functions/clean');
          const coerce = require('semver/functions/coerce');

          console.log(coerce(version, {includePrerelease: true}));
          console.log(valid(clean(coerce(version, {includePrerelease: true}))));

          core.info("hi");



    # - name: Validate Plugin
    #   if: ${{ inputs.validate-plugin == "true" }}
    #   uses: actions/github-script@v6
    #   env:
    #     PJSON_LOCATION: ${{ github.workspace }}/package.json
    #   with:
    #     script: |
    #       const pjsonLocation = process.env.PJSON_LOCATION;
    #       const pjson = require(pjsonLocation);
    #       const hasLandoKeyword = Array.isArray(pjson.keywords) && (pjson.keywords.includes("lando") || pjson.keywords.includes("lando-plugin"));
    #       if (hasLandoKeyword) {
    #         // Add in GitHub output https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
    #         core.info("Confirmed this is a Lando plugin.")
    #         process.exit(0);
    #       } else {
    #         core.setFailed("Invalid Lando plugin; required keywords not detected in package.json.");
    #       }
    # - name: Install Dependencies
    #   shell: bash
    #   run: |
    #     npm install -g bundle-dependencies@1.0.2
    #     npm install -g version-bump-prompt@6.1.0
    # - name: Checkout Code
    #   shell: bash
    #   run: |
    #     git fetch --unshallow && git fetch --all
    #     git config user.name ${{ inputs.git-username }}
    #     git config user.email ${{ inputs.git-email }}
    #     git checkout ${{ github.event.release.target_commitish }}
    # - name: Bundle dependencies
    #   shell: bash
    #   if: ${{ inputs.bundle-deps == "true" }}
    #   run: |
    #     bundle-dependencies update
    #     echo "Bundled dependencies:"
    #     bundle-dependencies list-bundled-dependencies
    # - name: Bump Version and Push
    #   shell: bash
    #   run: |
    #     bump "${{ github.event.release.tag_name }}" --commit
    #     git push origin ${{ github.event.release.target_commitish }}
    # - name: Retag Release
    #   shell: bash
    #   run: |
    #     TAGS=${{ inputs.tags }}
    #     IFS="," read -ra TAG_ARRAY <<< "$TAGS"

    #     for tag in "${TAG_ARRAY[@]}"; do
    #       git tag -f ${tag} $(git log --pretty=format:"%h" -n 1)
    #       git push --force origin ${tag}
    #     done
    # - name: Output package bump result
    #   shell: bash
    #   run: |
    #     echo "Bumped package version to ${{ github.event.release.tag_name }}"
